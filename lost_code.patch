diff --git a/src/app/(root)/layout.tsx b/src/app/(root)/layout.tsx
index c23bb89..209762f 100644
--- a/src/app/(root)/layout.tsx
+++ b/src/app/(root)/layout.tsx
@@ -1,5 +1,4 @@
 import type { Metadata } from "next";
-import { Barlow } from "next/font/google";
 import "../globals.css";
 import StoreProvider from "../StoreProvider";
 import Navbar from "@/components/navbar";
diff --git a/src/components/Aboutus.tsx b/src/components/Aboutus.tsx
index a4dded3..48d1c4a 100644
--- a/src/components/Aboutus.tsx
+++ b/src/components/Aboutus.tsx
@@ -19,7 +19,7 @@ interface TeamCardProps {
   role: string
   image: string
   size?: string
-  index?: number
+  index?: boolean // Changed from number to boolean
 }
 
 interface StatCardProps {
@@ -28,23 +28,7 @@ interface StatCardProps {
 }
 
 // Custom SVG Icons to replace react-icons
-const FacebookIcon = () => (
-  <svg width="10" height="10" viewBox="0 0 24 24" fill="currentColor">
-    <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z" />
-  </svg>
-)
-
-const LinkedInIcon = () => (
-  <svg width="10" height="10" viewBox="0 0 24 24" fill="currentColor">
-    <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v11.452zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z" />
-  </svg>
-)
-
-const GitHubIcon = () => (
-  <svg width="10" height="10" viewBox="0 0 24 24" fill="currentColor">
-    <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z" />
-  </svg>
-)
+//
 
 // Data
 const mentors = [
@@ -146,6 +130,7 @@ function TeamCard({ name, role, image, size, index = false }: TeamCardProps) {
               alt={name}
               fill
               className="object-cover transition-transform duration-500 group-hover:scale-110"
+              sizes={index ? "128px" : "96px"}
             />
             {/* Overlay glow */}
             <div className="absolute inset-0 " />
@@ -195,13 +180,13 @@ function TeamCard({ name, role, image, size, index = false }: TeamCardProps) {
 
 // =================== Main Page ===================
 export default function About() {
-  const [isDarkMode, setIsDarkMode] = useState(false)
+  const [, setIsDarkMode] = useState(false) // Fixed unused variable warning
 
   // Detect system dark mode
   useEffect(() => {
     const dark = window.matchMedia("(prefers-color-scheme: dark)").matches
     setIsDarkMode(dark)
-  }, [])
+  }, [setIsDarkMode])
 
   return (
     <div className="min-h-screen relative overflow-hidden">
@@ -448,4 +433,4 @@ function twoSum(nums, target) {
       `}</style>
     </div>
   )
-}
+}
\ No newline at end of file
diff --git a/src/components/creator_Dashboard/creatorDashboard.tsx b/src/components/creator_Dashboard/creatorDashboard.tsx
index edeb59c..793692e 100644
--- a/src/components/creator_Dashboard/creatorDashboard.tsx
+++ b/src/components/creator_Dashboard/creatorDashboard.tsx
@@ -1,140 +1,25 @@
 "use client"
 
-import React, { useState } from "react"
-import { Plus, Edit, Trash2, Code, Award, Package, Sparkles, TrendingUp, Users } from "lucide-react"
+import React, { useState, useMemo } from "react"
+import {
+  Plus,
+  Code,
+  Award,
+  Package,
+  Sparkles,
+  Users,
+  Filter,
+  ChevronLeft,
+  ChevronRight,
+  X,
+} from "lucide-react"
+import CreateBadgeForm from "./create-new/badges/createBadge"
+import CreatePackageForm from "./create-new/packages/createPackage"
+import CreateProblemForm from "./create-new/problems/createProblem"
+import AllItemsTable from "./filter-table/AllItemsTable"
 
-interface Problem {
-  id: number
-  title: string
-  hints: string[]
-  difficulty: string
-  category: string
-  submissions: number
-  successRate: string
-  created: string
-}
-
-interface CreateProblemFormData {
-  title: string
-  hints: string[]
-  testCases: string
-  expectedOutput: string
-  definition: string
-  difficulty: string
-  category: string
-  tags: string
-}
-
-interface CreateBadgeFormData {
-  title: string
-  description: string
-  icon: string
-  packageLink: string
-  image: File | null
-}
-
-interface CreatePackageFormData {
-  name: string
-  problems: string
-  badges: string
-  difficulty: string
-}
-
-interface DialogTriggerProps {
-  children: React.ReactNode
-  onClick?: () => void
-}
-
-interface DialogContentProps {
-  children: React.ReactNode
-  onClose?: () => void
-  className?: string
-}
-
-// Component interfaces for proper typing
-interface ComponentProps {
-  children: React.ReactNode
-  className?: string
-}
-
-interface ButtonProps extends ComponentProps {
-  variant?: "default" | "outline" | "ghost"
-  size?: "default" | "sm"
-  onClick?: () => void
-  type?: "button" | "submit"
-}
-
-interface InputProps {
-  className?: string
-  type?: string
-  id?: string
-  value?: string
-  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void
-  placeholder?: string
-  accept?: string
-}
 
-interface TextareaProps {
-  className?: string
-  id?: string
-  value?: string
-  onChange?: (e: React.ChangeEvent<HTMLTextAreaElement>) => void
-  placeholder?: string
-}
-
-interface LabelProps extends ComponentProps {
-  htmlFor?: string
-}
-
-interface SelectProps {
-  children: React.ReactNode
-  value?: string
-  onValueChange?: (value: string) => void
-}
-
-interface SelectItemProps {
-  value: string
-  children: React.ReactNode
-  onValueChange?: (value: string) => void
-  onClose?: () => void
-}
-
-interface TabsProps {
-  children: React.ReactNode
-  defaultValue?: string
-  className?: string
-}
 
-interface TabsListProps {
-  children: React.ReactNode
-  activeTab?: string
-  setActiveTab?: (tab: string) => void
-  className?: string
-}
-
-interface TabsTriggerProps {
-  children: React.ReactNode
-  value: string
-  activeTab?: string
-  setActiveTab?: (tab: string) => void
-  className?: string
-}
-
-interface TabsContentProps {
-  children: React.ReactNode
-  value: string
-  activeTab?: string
-  className?: string
-}
-
-// Simple Badge component
-const Badge = ({ children, className = "" }: ComponentProps) => (
-  <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${className}`}>
-    {children}
-  </span>
-)
-
-// Simple Button component
 const Button = ({
   children,
   className = "",
@@ -142,20 +27,24 @@ const Button = ({
   size = "default",
   onClick,
   type = "button",
+  disabled = false,
   ...props
-}: ButtonProps) => {
+}) => {
   const baseClasses =
-    "inline-flex items-center justify-center rounded-md font-medium transition-all duration-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background"
+    "inline-flex items-center justify-center rounded-xl font-semibold transition-all duration-300 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background transform active:scale-95 relative overflow-hidden"
 
   const variants = {
-    default: "bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white shadow-lg hover:shadow-xl transform hover:scale-105",
-    outline: "border border-input hover:bg-accent hover:text-accent-foreground backdrop-blur-sm",
+    default: "bg-primary hover:bg-primary/90 text-primary-foreground shadow-lg hover:shadow-xl hover:scale-105",
+    outline:
+      "border-2 border-border hover:border-primary hover:bg-primary/10 backdrop-blur-sm hover:text-primary text-foreground",
     ghost: "hover:bg-accent hover:text-accent-foreground",
+    destructive: "bg-destructive hover:bg-destructive/90 text-destructive-foreground shadow-lg",
   }
 
   const sizes = {
-    default: "h-10 py-2 px-4",
-    sm: "h-9 px-3 rounded-md",
+    default: "h-11 py-3 px-6",
+    sm: "h-9 px-4 rounded-lg text-sm",
+    lg: "h-12 px-8 text-lg",
   }
 
   return (
@@ -163,6 +52,7 @@ const Button = ({
       type={type}
       className={`${baseClasses} ${variants[variant]} ${sizes[size]} ${className}`}
       onClick={onClick}
+      disabled={disabled}
       {...props}
     >
       {children}
@@ -170,203 +60,30 @@ const Button = ({
   )
 }
 
-// Simple Card components
-const Card = ({
-  children,
-  className = "",
-  onClick,
-}: ComponentProps & { onClick?: () => void }) => (
-  <div className={`rounded-xl border bg-card/50 backdrop-blur-sm text-card-foreground shadow-lg hover:shadow-2xl transition-all duration-300 ${className}`} onClick={onClick}>
-    {children}
-  </div>
-)
-
-const CardHeader = ({ children, className = "" }: ComponentProps) => (
-  <div className={`flex flex-col space-y-1.5 p-6 ${className}`}>{children}</div>
-)
-
-const CardTitle = ({ children, className = "" }: ComponentProps) => (
-  <h3 className={`text-2xl font-semibold leading-none tracking-tight ${className}`}>{children}</h3>
-)
-
-const CardDescription = ({ children, className = "" }: ComponentProps) => (
-  <p className={`text-sm text-muted-foreground ${className}`}>{children}</p>
-)
-
-const CardContent = ({ children, className = "" }: ComponentProps) => (
-  <div className={`p-6 pt-0 ${className}`}>{children}</div>
-)
-
-// Simple Input component
-const Input = ({
-  className = "",
-  type = "text",
-  ...props
-}: InputProps) => (
-  <input
-    type={type}
-    className={`flex h-10 w-full rounded-md border border-input bg-background/50 backdrop-blur-sm px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 transition-all duration-200 ${className}`}
-    {...props}
-  />
-)
-
-// Simple Textarea component
-const Textarea = ({
-  className = "",
-  ...props
-}: TextareaProps) => (
-  <textarea
-    className={`flex min-h-[80px] w-full rounded-md border border-input bg-background/50 backdrop-blur-sm px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 transition-all duration-200 ${className}`}
-    {...props}
-  />
-)
-
-// Simple Label component
-const Label = ({
-  children,
-  htmlFor,
-  className = "",
-}: LabelProps) => (
-  <label
-    htmlFor={htmlFor}
-    className={`text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 ${className}`}
-  >
-    {children}
-  </label>
-)
-
-// Simple Select components
-const Select = ({
-  children,
-  value,
-  onValueChange,
-}: SelectProps) => {
-  const [isOpen, setIsOpen] = useState(false)
-  const [selectedValue, setSelectedValue] = useState(value || "")
-
-  const handleValueChange = (newValue: string) => {
-    setSelectedValue(newValue)
-    onValueChange?.(newValue)
-    setIsOpen(false)
-  }
-
-  return (
-    <div className="relative">
-      {React.Children.map(children, (child) => {
-        if (React.isValidElement(child)) {
-          if (child.type === SelectTrigger) {
-            return React.cloneElement(child as React.ReactElement<{ onClick?: () => void; selectedValue?: string }>,  { 
-              onClick: () => setIsOpen(!isOpen), 
-              selectedValue 
-            })
-          } else if (child.type === SelectContent) {
-            return isOpen
-             ? React.cloneElement(child as React.ReactElement<{ onValueChange?: (value: string) => void; onClose?: () => void }>, {
-                  onValueChange: handleValueChange, 
-                  onClose: () => setIsOpen(false) 
-                })
-              : null
-          }
-        }
-        return child
-      })}
-    </div>
-  )
-}
-
-const SelectTrigger = ({
-  onClick,
-  selectedValue,
-}: { children: React.ReactNode; onClick?: () => void; selectedValue?: string }) => (
-  <button
-    type="button"
-    className="flex h-10 w-full items-center justify-between rounded-md border border-input bg-background/50 backdrop-blur-sm px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 transition-all duration-200"
-    onClick={onClick}
-  >
-    <span>{selectedValue || "Select..."}</span>
-    <svg className="h-4 w-4 opacity-50" fill="none" stroke="currentColor" viewBox="0 0 24 24">
-      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
-    </svg>
-  </button>
-)
-
-const SelectValue = ({ children, placeholder }: { children?: React.ReactNode; placeholder?: string }) => (
-  <span className="text-muted-foreground">
-    {children || placeholder}
-  </span>
-)
-
-const SelectContent = ({
-  children,
-  onValueChange,
-  onClose,
-}: { children: React.ReactNode; onValueChange?: (value: string) => void; onClose?: () => void }) => (
-  <div className="absolute top-full left-0 right-0 z-50 mt-1 rounded-md border bg-popover/95 backdrop-blur-md shadow-xl">
-    <div className="p-1">
-      {React.Children.map(children, (child) => {
-        if (React.isValidElement(child)) {
-          return React.cloneElement(child as React.ReactElement<SelectItemProps>, {
-            onValueChange, onClose
-          })
-        }
-        return child
-      })}
-    </div>
-  </div>
-)
-
-const SelectItem = ({
-  value,
-  children,
-  onValueChange,
-  onClose,
-}: SelectItemProps) => (
+const Card = ({ children, className = "", onClick }) => (
   <div
-    className="relative flex cursor-pointer select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none hover:bg-accent hover:text-accent-foreground transition-colors duration-150"
-    onClick={() => {
-      onValueChange?.(value)
-      onClose?.()
-    }}
+    className={`rounded-2xl border border-border bg-card/80 backdrop-blur-sm text-card-foreground shadow-lg hover:shadow-2xl transition-all duration-300 hover:scale-[1.02] ${className}`}
+    onClick={onClick}
   >
     {children}
   </div>
 )
 
-// Simple Table components with proper typing
-const Table = ({ children, className = "" }: ComponentProps) => (
-  <div className="w-full overflow-auto">
-    <table className={`w-full caption-bottom text-sm ${className}`}>{children}</table>
-  </div>
+const CardHeader = ({ children, className = "" }) => (
+  <div className={`flex flex-col space-y-2 p-6 ${className}`}>{children}</div>
 )
 
-const TableHeader = ({ children }: { children: React.ReactNode }) => (
-  <thead className="[&_tr]:border-b">{children}</thead>
+const CardTitle = ({ children, className = "" }) => (
+  <h3 className={`text-2xl font-bold leading-none tracking-tight text-card-foreground ${className}`}>{children}</h3>
 )
 
-const TableBody = ({ children }: { children: React.ReactNode }) => (
-  <tbody className="[&_tr:last-child]:border-0">{children}</tbody>
-)
-
-const TableRow = ({ children, className = "" }: ComponentProps) => (
-  <tr className={`border-b transition-colors ${className}`}>{children}</tr>
-)
-
-const TableHead = ({ children, className = "" }: ComponentProps) => (
-  <th className={`h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 ${className}`}>
-    {children}
-  </th>
+const CardDescription = ({ children, className = "" }) => (
+  <p className={`text-sm text-muted-foreground ${className}`}>{children}</p>
 )
 
-const TableCell = ({ children, className = "" }: ComponentProps) => (
-  <td className={`p-4 align-middle [&:has([role=checkbox])]:pr-0 ${className}`}>{children}</td>
-)
+const CardContent = ({ children, className = "" }) => <div className={`p-6 pt-0 ${className}`}>{children}</div>
 
-// Simple Dialog components
-const Dialog = ({
-  children,
-  open,
-  onOpenChange,
-}: { children: React.ReactNode; open?: boolean; onOpenChange?: (open: boolean) => void }) => {
+const Dialog = ({ children, open, onOpenChange }) => {
   const [isOpen, setIsOpen] = useState(open || false)
 
   React.useEffect(() => {
@@ -375,23 +92,34 @@ const Dialog = ({
     }
   }, [open])
 
-  const handleOpenChange = (newOpen: boolean) => {
+  const handleOpenChange = (newOpen) => {
     setIsOpen(newOpen)
     onOpenChange?.(newOpen)
   }
 
+  React.useEffect(() => {
+    if (isOpen) {
+      document.body.style.overflow = "hidden"
+    } else {
+      document.body.style.overflow = "unset"
+    }
+    return () => {
+      document.body.style.overflow = "unset"
+    }
+  }, [isOpen])
+
   return (
     <>
       {React.Children.map(children, (child) => {
         if (React.isValidElement(child)) {
           if (child.type === DialogTrigger) {
-            return React.cloneElement(child as React.ReactElement<DialogTriggerProps>, { 
-              onClick: () => handleOpenChange(true) 
+            return React.cloneElement(child, {
+              onClick: () => handleOpenChange(true),
             })
           } else if (child.type === DialogContent) {
             return isOpen
-              ? React.cloneElement(child as React.ReactElement<DialogContentProps>, { 
-                  onClose: () => handleOpenChange(false) 
+              ? React.cloneElement(child, {
+                  onClose: () => handleOpenChange(false),
                 })
               : null
           }
@@ -402,496 +130,110 @@ const Dialog = ({
   )
 }
 
-const DialogTrigger = ({
-  children,
-  onClick,
-}: DialogTriggerProps) => <div onClick={onClick}>{children}</div>
+const DialogTrigger = ({ children, onClick }) => <div onClick={onClick}>{children}</div>
 
-const DialogContent = ({
-  children,
-  onClose,
-  className = "",
-}: DialogContentProps) => (
-  <div className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/60 backdrop-blur-sm" onClick={onClose}>
+const DialogContent = ({ children, onClose, className = "" }) => (
+  <div
+    className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/70 backdrop-blur-md"
+    onClick={onClose}
+  >
     <div
-      className={`bg-background/95 backdrop-blur-lg rounded-xl shadow-2xl max-w-lg w-full border ${className}`}
+    
+    // customize size of dialog
+
+      className={`glass rounded-3xl shadow-2xl max-w-5xl w-full max-h-[80vh] overflow-hidden border border-white/10 ${className}`}
       onClick={(e) => e.stopPropagation()}
     >
-      <div className="relative p-6">
-        <button onClick={onClose} className="absolute top-4 right-4 text-gray-400 hover:text-gray-600 transition-colors">
-          <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
-            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
-          </svg>
+      <div className="relative max-h-[65vh] overflow-y-auto">
+        <button
+          onClick={onClose}
+          className="absolute top-6 right-6 z-10 text-muted-foreground hover:text-primary transition-colors duration-200 bg-background/80 backdrop-blur-sm rounded-full p-2 hover:bg-accent"
+        >
+          <X className="w-5 h-5" />
         </button>
-        {children}
+        <div className="p-8">{children}</div>
       </div>
     </div>
   </div>
 )
 
-const DialogHeader = ({ children, className = "" }: ComponentProps) => (
-  <div className={`flex flex-col space-y-1.5 text-center sm:text-left mb-4 ${className}`}>{children}</div>
-)
-
-const DialogTitle = ({ children, className = "" }: ComponentProps) => (
-  <h3 className={`text-lg font-semibold leading-none tracking-tight ${className}`}>{children}</h3>
-)
-
-const DialogDescription = ({ children, className = "" }: ComponentProps) => (
-  <p className={`text-sm text-muted-foreground ${className}`}>{children}</p>
-)
-
-// Simple Tabs components with proper typing
-const Tabs = ({ children, defaultValue, className = "" }: TabsProps) => {
-  const [activeTab, setActiveTab] = useState(defaultValue || "")
+// Form wrapper components to handle dialog integration
+const ProblemFormWrapper = ({ onSuccess, editingProblem }) => {
+  const handleSubmit = (formData) => {
+    console.log("Problem created/updated:", formData)
+    onSuccess?.()
+  }
 
-  return (
-    <div className={className}>
-      {React.Children.map(children, (child) => {
-        if (React.isValidElement(child)) {
-          return React.cloneElement(child as React.ReactElement<TabsListProps | TabsContentProps>, { 
-            activeTab, 
-            setActiveTab 
-          })
-        }
-        return child
-      })}
-    </div>
-  )
+  return <CreateProblemForm onSubmit={handleSubmit} editingProblem={editingProblem} />
 }
 
-const TabsList = ({ children, activeTab, setActiveTab, className = "" }: TabsListProps) => (
-  <div
-    className={`inline-flex h-10 items-center justify-center rounded-lg bg-muted/50 backdrop-blur-sm p-1 text-muted-foreground ${className}`}
-  >
-    {React.Children.map(children, (child) => {
-      if (React.isValidElement(child)) {
-        return React.cloneElement(child as React.ReactElement<TabsTriggerProps>, { 
-          activeTab, 
-          setActiveTab 
-        })
-      }
-      return child
-    })}
-  </div>
-)
-
-const TabsTrigger = ({
-  children,
-  value,
-  activeTab,
-  setActiveTab,
-  className = "",
-}: TabsTriggerProps) => (
-  <button
-    className={`inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 ${activeTab === value ? "bg-background text-foreground shadow-sm" : ""} ${className}`}
-    onClick={() => setActiveTab?.(value)}
-  >
-    {children}
-  </button>
-)
-
-const TabsContent = ({
-  children,
-  value,
-  activeTab,
-  className = "",
-}: TabsContentProps) =>
-  activeTab === value ? (
-    <div
-      className={`mt-2 font-barlow ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 ${className}`}
-    >
-      {children}
-    </div>
-  ) : null
-
-// Mock data for admin responses
-const mockAdminResponses = [
-  {
-    message: "Problem approved and published",
-    status: "Approved",
-    date: "2 days ago",
-  },
-  {
-    message: "Badge request pending review",
-    status: "Pending",
-    date: "5 days ago",
-  },
-  {
-    message: "Package rejected - missing test cases",
-    status: "Rejected",
-    date: "7 days ago",
-  },
-]
-
-function CreateProblemForm({
-  onSubmit,
-  editingProblem,
-}: { onSubmit: (data: CreateProblemFormData) => void; editingProblem?: Problem | null }) {
-  const [formData, setFormData] = useState<CreateProblemFormData>({
-    title: editingProblem?.title || "",
-    hints: editingProblem?.hints?.length ? editingProblem.hints : [""],
-    testCases: "",
-    expectedOutput: "",
-    definition: "",
-    difficulty: editingProblem?.difficulty || "",
-    category: editingProblem?.category || "",
-    tags: "",
-  })
-
-  const handleHintChange = (index: number, value: string) => {
-    const newHints = [...formData.hints]
-    newHints[index] = value
-    setFormData({ ...formData, hints: newHints })
+const BadgeFormWrapper = ({ onSuccess }) => {
+  const handleSuccess = () => {
+    console.log("Badge created successfully")
+    onSuccess?.()
   }
 
-  const addHint = () => {
-    if (formData.hints.length < 3) {
-      setFormData({ ...formData, hints: [...formData.hints, ""] })
-    }
-  }
-
-  const removeHint = (index: number) => {
-    if (formData.hints.length > 1) {
-      const newHints = [...formData.hints]
-      newHints.splice(index, 1)
-      setFormData({ ...formData, hints: newHints })
-    }
-  }
+  return <CreateBadgeForm onSuccess={handleSuccess} />
+}
 
-  const handleSubmit = (e: React.FormEvent) => {
-    e.preventDefault()
-    const filteredHints = formData.hints.filter(hint => hint.trim() !== "")
-    onSubmit({ ...formData, hints: filteredHints })
+const PackageFormWrapper = ({ onSuccess }) => {
+  const handleSuccess = (result) => {
+    console.log("Package created successfully:", result)
+    onSuccess?.()
   }
 
-  return (
-    <form onSubmit={handleSubmit} className="space-y-6">
-      <div className="space-y-2">
-        <Label htmlFor="title">Problem Title</Label>
-        <Input
-          id="title"
-          value={formData.title}
-          onChange={(e) => setFormData({ ...formData, title: e.target.value })}
-          placeholder="Enter problem title"
-        />
-      </div>
-      
-      <div className="space-y-3">
-        <Label>Hints (max 3)</Label>
-        {formData.hints.map((hint, index) => (
-          <div key={index} className="flex gap-2">
-            <Input
-              value={hint}
-              onChange={(e) => handleHintChange(index, e.target.value)}
-              placeholder={`Hint ${index + 1}`}
-            />
-            {formData.hints.length > 1 && (
-              <Button
-                type="button"
-                variant="ghost"
-                size="sm"
-                onClick={() => removeHint(index)}
-                className="px-2 py-1 bg-red-500 text-white rounded hover:bg-red-600 transform-none shadow-none"
-              >
-                ✕
-              </Button>
-            )}
-          </div>
-        ))}
-        {formData.hints.length < 3 && (
-          <Button
-            type="button"
-            variant="ghost"
-            onClick={addHint}
-            className="mt-2 px-3 py-1 bg-blue-500 text-white font-medium rounded hover:bg-blue-600 transform-none shadow-none"
-          >
-            + Add Hint
-          </Button>
-        )}
-      </div>
-
-      <div className="space-y-2">
-        <Label htmlFor="definition">Problem Definition</Label>
-        <Textarea
-          id="definition"
-          value={formData.definition}
-          onChange={(e) => setFormData({ ...formData, definition: e.target.value })}
-          placeholder="Describe the problem"
-        />
-      </div>
-      
-      <div className="space-y-2">
-        <Label htmlFor="testCases">Test Cases</Label>
-        <Textarea
-          id="testCases"
-          value={formData.testCases}
-          onChange={(e) => setFormData({ ...formData, testCases: e.target.value })}
-          placeholder="Enter test cases"
-        />
-      </div>
-      
-      <div className="space-y-2">
-        <Label htmlFor="expectedOutput">Expected Output</Label>
-        <Textarea
-          id="expectedOutput"
-          value={formData.expectedOutput}
-          onChange={(e) => setFormData({ ...formData, expectedOutput: e.target.value })}
-          placeholder="Enter expected output"
-        />
-      </div>
-      
-      <div className="grid grid-cols-2 gap-4">
-        <div className="space-y-2">
-          <Label htmlFor="difficulty">Difficulty</Label>
-          <Select value={formData.difficulty} onValueChange={(value) => setFormData({ ...formData, difficulty: value })}>
-            <SelectTrigger>
-              <SelectValue placeholder="Select difficulty" />
-            </SelectTrigger>
-            <SelectContent>
-              <SelectItem value="Easy">Easy</SelectItem>
-              <SelectItem value="Medium">Medium</SelectItem>
-              <SelectItem value="Hard">Hard</SelectItem>
-            </SelectContent>
-          </Select>
-        </div>
-        
-        <div className="space-y-2">
-          <Label htmlFor="category">Category</Label>
-          <Select value={formData.category} onValueChange={(value) => setFormData({ ...formData, category: value })}>
-            <SelectTrigger>
-              <SelectValue placeholder="Select category" />
-            </SelectTrigger>
-            <SelectContent>
-              <SelectItem value="Array">Array</SelectItem>
-              <SelectItem value="String">String</SelectItem>
-              <SelectItem value="Tree">Tree</SelectItem>
-              <SelectItem value="Graph">Graph</SelectItem>
-              <SelectItem value="Dynamic Programming">Dynamic Programming</SelectItem>
-            </SelectContent>
-          </Select>
-        </div>
-      </div>
-      
-      <div className="space-y-2">
-        <Label htmlFor="tags">Tags</Label>
-        <Input
-          id="tags"
-          value={formData.tags}
-          onChange={(e) => setFormData({ ...formData, tags: e.target.value })}
-          placeholder="Enter tags (comma separated)"
-        />
-      </div>
-      
-      <Button type="submit" className="w-full">
-        {editingProblem ? "Update Problem" : "Create Problem"}
-      </Button>
-    </form>
-  )
+  return <CreatePackageForm onSuccess={handleSuccess} />
 }
 
-function CreateBadgeForm() {
-  const [formData, setFormData] = useState<CreateBadgeFormData>({
-    title: "",
-    description: "",
-    icon: "",
-    packageLink: "",
-    image: null,
-  })
-
-  const [imagePreview, setImagePreview] = useState<string | null>(null)
-
-  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
-    const file = e.target.files?.[0]
-    if (file) {
-      setFormData({ ...formData, image: file })
-
-      const reader = new FileReader()
-      reader.onload = (e) => {
-        setImagePreview(e.target?.result as string)
-      }
-      reader.readAsDataURL(file)
-    }
-  }
-
-  const handleSubmit = (e: React.FormEvent) => {
-    e.preventDefault()
-    console.log("Create Badge:", {
-      ...formData,
-      image: formData.image
-        ? {
-            name: formData.image.name,
-            size: formData.image.size,
-            type: formData.image.type,
-          }
-        : null,
-    })
-  }
+const Pagination = ({ currentPage, totalPages, onPageChange }) => {
+  const pages = Array.from({ length: totalPages }, (_, i) => i + 1)
 
   return (
-    <form onSubmit={handleSubmit} className="space-y-6">
-      <div className="space-y-2">
-        <Label htmlFor="badgeTitle">Badge Title</Label>
-        <Input
-          id="badgeTitle"
-          value={formData.title}
-          onChange={(e) => setFormData({ ...formData, title: e.target.value })}
-          placeholder="Enter badge title"
-        />
-      </div>
-      
-      <div className="space-y-2">
-        <Label htmlFor="badgeDescription">Description</Label>
-        <Textarea
-          id="badgeDescription"
-          value={formData.description}
-          onChange={(e) => setFormData({ ...formData, description: e.target.value })}
-          placeholder="Describe the badge"
-        />
-      </div>
-      
-      <div className="space-y-2">
-        <Label htmlFor="badgeImage">Badge Image</Label>
-        <Input id="badgeImage" type="file" accept="image/*" onChange={handleImageUpload} className="cursor-pointer" />
-        {imagePreview && (
-          <div className="mt-3">
-            <div 
-              className="w-20 h-20 bg-cover bg-center rounded-xl border-2 border-gray-300 shadow-lg"
-              style={{ backgroundImage: `url(${imagePreview})` }}
-              role="img"
-              aria-label="Badge preview"
-            />
-          </div>
-        )}
-      </div>
-      
-      <div className="grid grid-cols-2 gap-4">
-        <div className="space-y-2">
-          <Label htmlFor="badgeIcon">Icon</Label>
-          <Input
-            id="badgeIcon"
-            value={formData.icon}
-            onChange={(e) => setFormData({ ...formData, icon: e.target.value })}
-            placeholder="Enter icon name or URL"
-          />
-        </div>
-        
-        <div className="space-y-2">
-          <Label htmlFor="packageLink">Package Link</Label>
-          <Input
-            id="packageLink"
-            value={formData.packageLink}
-            onChange={(e) => setFormData({ ...formData, packageLink: e.target.value })}
-            placeholder="Enter package link"
-          />
-        </div>
-      </div>
-      
-      <Button type="submit" className="w-full">
-        Create Badge
+    <div className="flex items-center justify-center space-x-2 mt-8">
+      <Button
+        variant="outline"
+        size="sm"
+        onClick={() => onPageChange(currentPage - 1)}
+        disabled={currentPage === 1}
+        className="hover:bg-primary/10 hover:border-primary"
+      >
+        <ChevronLeft className="w-4 h-4" />
       </Button>
-    </form>
-  )
-}
-
-function CreatePackageForm() {
-  const [formData, setFormData] = useState<CreatePackageFormData>({
-    name: "",
-    problems: "",
-    badges: "",
-    difficulty: "",
-  })
-
-  const handleSubmit = (e: React.FormEvent) => {
-    e.preventDefault()
-    console.log("Create Package:", formData)
-  }
 
-  return (
-    <form onSubmit={handleSubmit} className="space-y-6">
-      <div className="space-y-2">
-        <Label htmlFor="packageName">Package Name</Label>
-        <Input
-          id="packageName"
-          value={formData.name}
-          onChange={(e) => setFormData({ ...formData, name: e.target.value })}
-          placeholder="Enter package name"
-        />
-      </div>
-      
-      <div className="space-y-2">
-        <Label htmlFor="packageProblems">Add Problems</Label>
-        <Textarea
-          id="packageProblems"
-          value={formData.problems}
-          onChange={(e) => setFormData({ ...formData, problems: e.target.value })}
-          placeholder="List problems to include"
-        />
-      </div>
-      
-      <div className="space-y-2">
-        <Label htmlFor="packageBadges">Add Badges</Label>
-        <Textarea
-          id="packageBadges"
-          value={formData.badges}
-          onChange={(e) => setFormData({ ...formData, badges: e.target.value })}
-          placeholder="List badges to include"
-        />
-      </div>
-      
-      <div className="space-y-2">
-        <Label htmlFor="packageDifficulty">Package Difficulty</Label>
-        <Select onValueChange={(value) => setFormData({ ...formData, difficulty: value })}>
-          <SelectTrigger>
-            <SelectValue placeholder="Select difficulty" />
-          </SelectTrigger>
-          <SelectContent>
-            <SelectItem value="Beginner">Beginner</SelectItem>
-            <SelectItem value="Intermediate">Intermediate</SelectItem>
-            <SelectItem value="Advanced">Advanced</SelectItem>
-          </SelectContent>
-        </Select>
-      </div>
-      
-      <Button type="submit" className="w-full">
-        Create Package
+      {pages.map((page) => (
+        <Button
+          key={page}
+          variant={currentPage === page ? "default" : "outline"}
+          size="sm"
+          onClick={() => onPageChange(page)}
+          className={
+            currentPage === page ? "bg-primary text-primary-foreground" : "hover:bg-primary/10 hover:border-primary"
+          }
+        >
+          {page}
+        </Button>
+      ))}
+
+      <Button
+        variant="outline"
+        size="sm"
+        onClick={() => onPageChange(currentPage + 1)}
+        disabled={currentPage === totalPages}
+        className="hover:bg-primary/10 hover:border-primary"
+      >
+        <ChevronRight className="w-4 h-4" />
       </Button>
-    </form>
+    </div>
   )
 }
 
-function getDifficultyColor(difficulty: string) {
-  switch (difficulty) {
-    case "Easy":
-      return "bg-gradient-to-r from-green-500 to-emerald-600 text-white border-green-500"
-    case "Medium":
-      return "bg-gradient-to-r from-yellow-500 to-orange-600 text-white border-yellow-500"
-    case "Hard":
-      return "bg-gradient-to-r from-red-500 to-rose-600 text-white border-red-500"
-    default:
-      return "bg-gradient-to-r from-gray-500 to-slate-600 text-white border-gray-500"
-  }
-}
-
-function getStatusColor(status: string) {
-  switch (status) {
-    case "Approved":
-      return "bg-gradient-to-r from-green-500 to-emerald-600 text-white border-green-500"
-    case "Pending":
-      return "bg-gradient-to-r from-yellow-500 to-orange-600 text-white border-yellow-500"
-    case "Rejected":
-      return "bg-gradient-to-r from-red-500 to-rose-600 text-white border-red-500"
-    default:
-      return "bg-gradient-to-r from-gray-500 to-slate-600 text-white border-gray-500"
-  }
-}
-
 export default function CreatorDashboard() {
-  const [problems, setProblems] = useState<Problem[]>([
+  // Sample data - remove when connecting to API
+  const [allItems] = useState([
     {
       id: 1,
+      type: "problem",
       title: "Two Sum Array Challenge",
-      hints: ["Find two numbers that add up to target", "Use hash map for O(n) solution"],
       difficulty: "Easy",
       category: "Array",
       submissions: 248,
@@ -900,8 +242,8 @@ export default function CreatorDashboard() {
     },
     {
       id: 2,
+      type: "problem",
       title: "Binary Tree Traversal",
-      hints: ["Implement BFS and DFS algorithms", "Consider recursive and iterative approaches"],
       difficulty: "Medium",
       category: "Tree",
       submissions: 107,
@@ -910,352 +252,326 @@ export default function CreatorDashboard() {
     },
     {
       id: 3,
+      type: "badge",
+      title: "Array Master Badge",
+      category: "Achievement",
+      submissions: 45,
+      successRate: "85%",
+      created: "1 week ago",
+    },
+    {
+      id: 4,
+      type: "package",
+      title: "Data Structures Bundle",
+      category: "Learning",
+      submissions: 89,
+      successRate: "80%",
+      created: "2 weeks ago",
+    },
+    {
+      id: 5,
+      type: "problem",
       title: "Dynamic Programming Mastery",
-      hints: ["Advanced DP techniques and optimization", "Break down into subproblems", "Use memoization"],
       difficulty: "Hard",
       category: "Dynamic Programming",
       submissions: 315,
       successRate: "65%",
-      created: "7 days ago",
+      created: "3 weeks ago",
+    },
+    {
+      id: 6,
+      type: "badge",
+      title: "Problem Solver",
+      category: "Achievement",
+      submissions: 156,
+      successRate: "92%",
+      created: "1 month ago",
     },
   ])
 
-  const [editingProblem, setEditingProblem] = useState<Problem | null>(null)
+  const [adminResponses] = useState([
+    { message: "Problem approved and published", status: "Approved", date: "2 days ago" },
+    { message: "Badge request pending review", status: "Pending", date: "5 days ago" },
+    { message: "Package rejected - missing test cases", status: "Rejected", date: "7 days ago" },
+  ])
+
+  const [filter, setFilter] = useState("all")
+  const [currentPage, setCurrentPage] = useState(1)
+  const [editingProblem, setEditingProblem] = useState(null)
   const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)
   const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)
+  const [isBadgeDialogOpen, setIsBadgeDialogOpen] = useState(false)
+  const [isPackageDialogOpen, setIsPackageDialogOpen] = useState(false)
 
-  const handleCreateProblem = (formData: CreateProblemFormData) => {
-    const newProblem: Problem = {
-      id: problems.length + 1,
-      title: formData.title,
-      hints: formData.hints,
-      difficulty: formData.difficulty,
-      category: formData.category,
-      submissions: 0,
-      successRate: "0%",
-      created: "Just now",
-    }
-    setProblems([...problems, newProblem])
-    setIsCreateDialogOpen(false)
-    console.log("Create Problem:", formData)
-  }
+  const itemsPerPage = 5
 
-  const handleEditProblem = (formData: CreateProblemFormData) => {
-    if (editingProblem) {
-      setProblems(
-        problems.map((p) =>
-          p.id === editingProblem.id
-            ? {
-                ...p,
-                title: formData.title,
-                hints: formData.hints,
-                difficulty: formData.difficulty,
-                category: formData.category,
-              }
-            : p,
-        ),
-      )
-      setEditingProblem(null)
-      setIsEditDialogOpen(false)
-      console.log("Edit Problem:", formData)
-    }
-  }
+  // Filter data based on selected filter
+  const filteredItems = useMemo(() => {
+    if (filter === "all") return allItems
+    if (filter === "admin") return []
+    return allItems.filter((item) => item.type === filter)
+  }, [allItems, filter])
 
-  const handleDeleteProblem = (id: number) => {
-    setProblems(problems.filter((p) => p.id !== id))
-    console.log("Delete Problem:", id)
-  }
+  // Pagination logic
+  const totalPages = Math.ceil(filteredItems.length / itemsPerPage)
+  const paginatedItems = filteredItems.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage)
+
+  // Reset to page 1 when filter changes
+  React.useEffect(() => {
+    setCurrentPage(1)
+  }, [filter])
 
-  const openEditDialog = (problem: Problem) => {
-    setEditingProblem(problem)
+  
+  const openEditDialog = (item) => {
+    setEditingProblem(item)
     setIsEditDialogOpen(true)
   }
 
-  const openDeleteDialog = (problem: Problem) => {
-    if (confirm(`Are you sure you want to delete "${problem.title}"?`)) {
-      handleDeleteProblem(problem.id)
+  const openDeleteDialog = (item) => {
+    if (confirm(`Are you sure you want to delete "${item.title}"?`)) {
+      console.log("Delete item:", item.id)
     }
   }
 
   return (
-    <div className="min-h-screen bg-gradient-to-br from-gray-50 via-white to-gray-100 dark:bg-gradient-to-br dark:from-black dark:via-slate-900 dark:to-black text-gray-900 dark:text-gray-100 p-6">
-      {/* Animated Background Elements */}
-     
-
+    <div className="min-h-screen bg-gradient-to-br from-gray-50 via-white to-gray-100 dark:bg-gradient-to-br dark:from-black dark:via-slate-900 dark:to-black text-gray-900 dark:text-white p-4 md:p-6">
       <div className="max-w-7xl mx-auto space-y-8 relative z-10">
-        {/* Enhanced Header */}
-        <div className="text-center space-y-4">
-          <div className="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full mb-4">
-            <Sparkles className="w-8 h-8 text-white" />
+        <div className="text-center space-y-6">
+          <div className="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-r from-primary to-primary/80 rounded-2xl mb-6 float">
+            <Sparkles className="w-8 h-8 text-primary-foreground" />
           </div>
-          <h1 className="text-5xl font-bold bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 bg-clip-text text-transparent">
+          <h1 className="text-4xl md:text-6xl font-bold bg-gradient-to-r from-primary via-primary/80 to-primary bg-clip-text text-transparent">
             Creator Dashboard
           </h1>
-          <p className="text-gray-600 dark:text-gray-400 text-xl max-w-2xl mx-auto">
-            Craft amazing coding problems, design achievement badges, and create comprehensive learning packages
+          <p className="text-gray-600 dark:text-gray-300 text-lg md:text-xl max-w-3xl mx-auto px-4 leading-relaxed">
+            Craft amazing coding problems, design achievement badges, and create comprehensive learning packages with
+            our modern creator tools
           </p>
         </div>
 
-        {/* Stats Cards */}
         <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
-          <Card className="bg-gradient-to-r from-blue-600 to-blue-700 text-white border-0">
+          <Card className="bg-gradient-to-br from-primary/20 to-primary/10 border-primary/20 hover:border-primary/40 transition-all duration-300">
             <CardContent className="p-6">
               <div className="flex items-center justify-between">
                 <div>
-                  <p className="text-blue-100 text-sm font-medium">Total Problems</p>
-                  <p className="text-3xl font-bold">{problems.length}</p>
+                  <p className="text-primary/80 text-sm font-semibold mb-1">Total Problems</p>
+                  <p className="text-3xl font-bold text-gray-900 dark:text-white">
+                    {allItems.filter((item) => item.type === "problem").length}
+                  </p>
+                </div>
+                <div className="p-3 bg-primary/20 rounded-xl">
+                  <Code className="w-6 h-6 text-primary" />
                 </div>
-                <Code className="w-8 h-8 text-blue-200" />
               </div>
             </CardContent>
           </Card>
-          
-          <Card className="bg-gradient-to-r from-purple-600 to-purple-700 text-white border-0">
+
+          <Card className="bg-gradient-to-br from-chart-2/20 to-chart-2/10 border-chart-2/20 hover:border-chart-2/40 transition-all duration-300">
             <CardContent className="p-6">
               <div className="flex items-center justify-between">
                 <div>
-                  <p className="text-purple-100 text-sm font-medium">Total Submissions</p>
-                  <p className="text-3xl font-bold">{problems.reduce((acc, p) => acc + p.submissions, 0)}</p>
+                  <p className="text-chart-2/80 text-sm font-semibold mb-1">Total Badges</p>
+                  <p className="text-3xl font-bold text-gray-900 dark:text-white">
+                    {allItems.filter((item) => item.type === "badge").length}
+                  </p>
+                </div>
+                <div className="p-3 bg-chart-2/20 rounded-xl">
+                  <Award className="w-6 h-6 text-chart-2" />
                 </div>
-                <TrendingUp className="w-8 h-8 text-purple-200" />
               </div>
             </CardContent>
           </Card>
-          
-          <Card className="bg-gradient-to-r from-pink-600 to-pink-700 text-white border-0">
+
+          <Card className="bg-gradient-to-br from-chart-4/20 to-chart-4/10 border-chart-4/20 hover:border-chart-4/40 transition-all duration-300">
             <CardContent className="p-6">
               <div className="flex items-center justify-between">
                 <div>
-                  <p className="text-pink-100 text-sm font-medium">Avg Success Rate</p>
-                  <p className="text-3xl font-bold">77%</p>
+                  <p className="text-chart-4/80 text-sm font-semibold mb-1">Total Packages</p>
+                  <p className="text-3xl font-bold text-gray-900 dark:text-white">
+                    {allItems.filter((item) => item.type === "package").length}
+                  </p>
+                </div>
+                <div className="p-3 bg-chart-4/20 rounded-xl">
+                  <Package className="w-6 h-6 text-chart-4" />
                 </div>
-                <Users className="w-8 h-8 text-pink-200" />
               </div>
             </CardContent>
           </Card>
         </div>
 
-        {/* Enhanced Top Action Cards */}
         <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
           <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
             <DialogTrigger>
-              <Card className="cursor-pointer group transition-all duration-300 hover:scale-105 hover:shadow-2xl border-2 hover:border-blue-300 dark:hover:border-blue-600 bg-gradient-to-br from-white to-blue-50 dark:from-gray-900 dark:to-blue-950">
-                <CardHeader className="text-center">
-                  <div className="mx-auto w-16 h-16 bg-gradient-to-r from-blue-500 to-blue-600 rounded-2xl flex items-center justify-center mb-4 group-hover:scale-110 transition-transform duration-200 shadow-lg">
-                    <Code className="w-8 h-8 text-white" />
+              <Card className="cursor-pointer group transition-all duration-300 hover:scale-105 hover:shadow-2xl border-2 hover:border-primary/50 bg-white/80 dark:bg-gray-900/80 backdrop-blur-sm">
+                <CardHeader className="text-center p-6">
+                  <div className="mx-auto w-16 h-16 bg-gradient-to-r from-primary to-primary/80 rounded-2xl flex items-center justify-center mb-4 group-hover:scale-110 transition-transform duration-300 shadow-lg">
+                    <Code className="w-8 h-8 text-primary-foreground" />
                   </div>
-                  <CardTitle className="text-xl bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">Create New Problem</CardTitle>
-                  <CardDescription>Craft engaging coding challenges for learners</CardDescription>
+                  <CardTitle className="text-xl bg-gradient-to-r from-primary to-primary/80 bg-clip-text text-transparent">
+                    Create New Problem
+                  </CardTitle>
+                  <CardDescription className="text-sm text-gray-600 dark:text-gray-300">
+                    Craft engaging coding challenges for learners
+                  </CardDescription>
                 </CardHeader>
-                <CardContent>
-                  <Button className="w-full group-hover:shadow-lg" variant="outline">
+                <CardContent className="p-6 pt-0">
+                  <Button className="w-full group-hover:shadow-lg bg-transparent" variant="outline">
                     <Plus className="w-4 h-4 mr-2" />
                     Create Problem
                   </Button>
                 </CardContent>
               </Card>
             </DialogTrigger>
-            <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
-              <DialogHeader>
-                <DialogTitle>Create New Problem</DialogTitle>
-                <DialogDescription>Fill in the details to create a new coding problem</DialogDescription>
-              </DialogHeader>
-              <CreateProblemForm onSubmit={handleCreateProblem} />
+            <DialogContent>
+              <CreateProblemForm onSubmit={() => setIsCreateDialogOpen(false)} />
             </DialogContent>
           </Dialog>
 
-          <Dialog>
+          <Dialog open={isBadgeDialogOpen} onOpenChange={setIsBadgeDialogOpen}>
             <DialogTrigger>
-              <Card className="cursor-pointer group transition-all duration-300 hover:scale-105 hover:shadow-2xl border-2 hover:border-yellow-300 dark:hover:border-yellow-600 bg-gradient-to-br from-white to-yellow-50 dark:from-gray-900 dark:to-yellow-950">
-                <CardHeader className="text-center">
-                  <div className="mx-auto w-16 h-16 bg-gradient-to-r from-yellow-500 to-orange-500 rounded-2xl flex items-center justify-center mb-4 group-hover:scale-110 transition-transform duration-200 shadow-lg">
+              <Card className="cursor-pointer group transition-all duration-300 hover:scale-105 hover:shadow-2xl border-2 hover:border-chart-2/50 bg-white/80 dark:bg-gray-900/80 backdrop-blur-sm">
+                <CardHeader className="text-center p-6">
+                  <div className="mx-auto w-16 h-16 bg-gradient-to-r from-chart-2 to-chart-2/80 rounded-2xl flex items-center justify-center mb-4 group-hover:scale-110 transition-transform duration-300 shadow-lg">
                     <Award className="w-8 h-8 text-white" />
                   </div>
-                  <CardTitle className="text-xl bg-gradient-to-r from-yellow-600 to-orange-600 bg-clip-text text-transparent">Create New Badge</CardTitle>
-                  <CardDescription>Design beautiful achievement badges</CardDescription>
+                  <CardTitle className="text-xl bg-gradient-to-r from-chart-2 to-chart-2/80 bg-clip-text text-transparent">
+                    Create New Badge
+                  </CardTitle>
+                  <CardDescription className="text-sm text-gray-600 dark:text-gray-300">
+                    Design beautiful achievement badges
+                  </CardDescription>
                 </CardHeader>
-                <CardContent>
-                  <Button className="w-full group-hover:shadow-lg" variant="outline">
+                <CardContent className="p-6 pt-0">
+                  <Button className="w-full group-hover:shadow-lg bg-transparent" variant="outline">
                     <Plus className="w-4 h-4 mr-2" />
                     Create Badge
                   </Button>
                 </CardContent>
               </Card>
             </DialogTrigger>
-            <DialogContent className="max-w-2xl">
-              <DialogHeader>
-                <DialogTitle>Create New Badge</DialogTitle>
-                <DialogDescription>Design a new achievement badge</DialogDescription>
-              </DialogHeader>
-              <CreateBadgeForm />
+            <DialogContent>
+              <BadgeFormWrapper onSuccess={() => setIsBadgeDialogOpen(false)} />
             </DialogContent>
           </Dialog>
 
-          <Dialog>
+          <Dialog open={isPackageDialogOpen} onOpenChange={setIsPackageDialogOpen}>
             <DialogTrigger>
-              <Card className="cursor-pointer group transition-all duration-300 hover:scale-105 hover:shadow-2xl border-2 hover:border-purple-300 dark:hover:border-purple-600 bg-gradient-to-br from-white to-purple-50 dark:from-gray-900 dark:to-purple-950">
-                <CardHeader className="text-center">
-                  <div className="mx-auto w-16 h-16 bg-gradient-to-r from-purple-500 to-pink-500 rounded-2xl flex items-center justify-center mb-4 group-hover:scale-110 transition-transform duration-200 shadow-lg">
+              <Card className="cursor-pointer group transition-all duration-300 hover:scale-105 hover:shadow-2xl border-2 hover:border-chart-4/50 bg-white/80 dark:bg-gray-900/80 backdrop-blur-sm">
+                <CardHeader className="text-center p-6">
+                  <div className="mx-auto w-16 h-16 bg-gradient-to-r from-chart-4 to-chart-4/80 rounded-2xl flex items-center justify-center mb-4 group-hover:scale-110 transition-transform duration-300 shadow-lg">
                     <Package className="w-8 h-8 text-white" />
                   </div>
-                  <CardTitle className="text-xl bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent">Create New Package</CardTitle>
-                  <CardDescription>Bundle problems and badges together</CardDescription>
+                  <CardTitle className="text-xl bg-gradient-to-r from-chart-4 to-chart-4/80 bg-clip-text text-transparent">
+                    Create New Package
+                  </CardTitle>
+                  <CardDescription className="text-sm text-gray-600 dark:text-gray-300">
+                    Bundle problems and badges together
+                  </CardDescription>
                 </CardHeader>
-                <CardContent>
-                  <Button className="w-full group-hover:shadow-lg" variant="outline">
+                <CardContent className="p-6 pt-0">
+                  <Button className="w-full group-hover:shadow-lg bg-transparent" variant="outline">
                     <Plus className="w-4 h-4 mr-2" />
                     Create Package
                   </Button>
                 </CardContent>
               </Card>
             </DialogTrigger>
-            <DialogContent className="max-w-2xl">
-              <DialogHeader>
-                <DialogTitle>Create New Package</DialogTitle>
-                <DialogDescription>Bundle problems and badges into a comprehensive package</DialogDescription>
-              </DialogHeader>
-              <CreatePackageForm />
+            <DialogContent>
+              <PackageFormWrapper onSuccess={() => setIsPackageDialogOpen(false)} />
             </DialogContent>
           </Dialog>
         </div>
 
         <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
-          <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
-            <DialogHeader>
-              <DialogTitle>Edit Problem</DialogTitle>
-              <DialogDescription>Update the problem details</DialogDescription>
-            </DialogHeader>
-            <CreateProblemForm onSubmit={handleEditProblem} editingProblem={editingProblem} />
+          <DialogContent>
+            <ProblemFormWrapper onSuccess={() => setIsEditDialogOpen(false)} editingProblem={editingProblem} />
           </DialogContent>
         </Dialog>
 
-        {/* Enhanced Tabbed Content */}
-        <Tabs defaultValue="problems" className="space-y-6">
-          <TabsList className="grid w-full grid-cols-2 max-w-md mx-auto bg-white/50 dark:bg-gray-900/50 backdrop-blur-sm shadow-lg">
-            <TabsTrigger value="problems" className="text-sm font-medium">
-              Problems Created
-            </TabsTrigger>
-            <TabsTrigger value="responses" className="text-sm font-medium">
-              Admin Responses
-            </TabsTrigger>
-          </TabsList>
+        <div className="flex flex-wrap gap-3 justify-start items-start">
+          <Button
+            variant={filter === "all" ? "default" : "outline"}
+            onClick={() => setFilter("all")}
+            className={
+              filter === "all" ? "bg-primary text-primary-foreground" : "hover:bg-primary/10 hover:border-primary"
+            }
+          >
+            <Filter className="w-4 h-4 mr-2" />
+            All
+          </Button>
+          <Button
+            variant={filter === "problem" ? "default" : "outline"}
+            onClick={() => setFilter("problem")}
+            className={
+              filter === "problem" ? "bg-primary text-primary-foreground" : "hover:bg-primary/10 hover:border-primary"
+            }
+          >
+            <Code className="w-4 h-4 mr-2" />
+            Problems
+          </Button>
+          <Button
+            variant={filter === "badge" ? "default" : "outline"}
+            onClick={() => setFilter("badge")}
+            className={
+              filter === "badge" ? "bg-primary text-primary-foreground" : "hover:bg-primary/10 hover:border-primary"
+            }
+          >
+            <Award className="w-4 h-4 mr-2" />
+            Badges
+          </Button>
+          <Button
+            variant={filter === "package" ? "default" : "outline"}
+            onClick={() => setFilter("package")}
+            className={
+              filter === "package" ? "bg-primary text-primary-foreground" : "hover:bg-primary/10 hover:border-primary"
+            }
+          >
+            <Package className="w-4 h-4 mr-2" />
+            Packages
+          </Button>
+          <Button
+            variant={filter === "admin" ? "default" : "outline"}
+            onClick={() => setFilter("admin")}
+            className={
+              filter === "admin" ? "bg-primary text-primary-foreground" : "hover:bg-primary/10 hover:border-primary"
+            }
+          >
+            <Users className="w-4 h-4 mr-2" />
+            Admin Responses
+          </Button>
+        </div>
 
-          <TabsContent value="problems" className="space-y-4">
-            <Card className="border-0 shadow-2xl bg-white/70 dark:bg-gray-900/70 backdrop-blur-lg">
-              <CardHeader className="bg-gradient-to-r from-blue-600/10 to-purple-600/10 rounded-t-xl">
-                <CardTitle className="text-2xl">Problems Created</CardTitle>
-                <CardDescription>Manage your coding problems and track their performance</CardDescription>
-              </CardHeader>
-              <CardContent className="p-0">
-                <Table>
-                  <TableHeader>
-                    <TableRow className="bg-gray-50/50 dark:bg-gray-800/50">
-                      <TableHead className="font-semibold">Problem Title</TableHead>
-                      <TableHead className="font-semibold">Difficulty</TableHead>
-                      <TableHead className="font-semibold">Category</TableHead>
-                      <TableHead className="font-semibold">Submissions</TableHead>
-                      <TableHead className="font-semibold">Success Rate</TableHead>
-                      <TableHead className="font-semibold">Created</TableHead>
-                      <TableHead className="font-semibold">Actions</TableHead>
-                    </TableRow>
-                  </TableHeader>
-                  <TableBody>
-                    {problems.map((problem) => (
-                      <TableRow key={problem.id} className="hover:bg-blue-50/50 dark:hover:bg-blue-900/20 transition-all duration-200 group">
-                        <TableCell className="font-medium text-gray-900 dark:text-gray-100">{problem.title}</TableCell>
-                        <TableCell>
-                          <Badge className={`${getDifficultyColor(problem.difficulty)} shadow-md`}>{problem.difficulty}</Badge>
-                        </TableCell>
-                        <TableCell className="font-medium text-purple-600 dark:text-purple-400">{problem.category}</TableCell>
-                        <TableCell className="font-semibold text-blue-600 dark:text-blue-400">{problem.submissions}</TableCell>
-                        <TableCell className="font-semibold text-green-600 dark:text-green-400">{problem.successRate}</TableCell>
-                        <TableCell className="text-gray-600 dark:text-gray-400">{problem.created}</TableCell>
-                        <TableCell>
-                          <div className="flex space-x-2">
-                            <Button
-                              size="sm"
-                              variant="ghost"
-                              className="hover:bg-blue-100 dark:hover:bg-blue-900 transition-all duration-200 group-hover:scale-105"
-                              onClick={() => openEditDialog(problem)}
-                            >
-                              <Edit className="w-4 h-4" />
-                            </Button>
-                            <Button
-                              size="sm"
-                              variant="ghost"
-                              className="hover:bg-red-100 dark:hover:bg-red-900 transition-all duration-200 group-hover:scale-105"
-                              onClick={() => openDeleteDialog(problem)}
-                            >
-                              <Trash2 className="w-4 h-4" />
-                            </Button>
-                          </div>
-                        </TableCell>
-                      </TableRow>
-                    ))}
-                  </TableBody>
-                </Table>
-              </CardContent>
-            </Card>
-          </TabsContent>
+        <Card className="shadow-2xl border-gray-200/50 dark:border-gray-700/50 bg-white/80 dark:bg-gray-900/80 backdrop-blur-sm">
+          <CardHeader className="bg-gradient-to-r from-primary/5 to-primary/10 rounded-t-2xl border-b border-gray-200/50 dark:border-gray-700/50">
+            <CardTitle className="text-2xl text-gray-900 dark:text-white">
+              {filter === "all" && "All Items"}
+              {filter === "problem" && "Problems"}
+              {filter === "badge" && "Badges"}
+              {filter === "package" && "Packages"}
+              {filter === "admin" && "Admin Responses"}
+            </CardTitle>
+            <CardDescription className="text-gray-600 dark:text-gray-300">
+              {filter === "admin"
+                ? "View feedback and messages from administrators"
+                : "Manage your created content and track performance"}
+            </CardDescription>
+          </CardHeader>
+          <CardContent className="p-0">
+            <AllItemsTable 
+              items={paginatedItems}
+              filter={filter}
+              adminResponses={adminResponses}
+              onEdit={openEditDialog}
+              onDelete={openDeleteDialog}
+            />
 
-          <TabsContent value="responses" className="space-y-4">
-            <Card className="border-0 shadow-2xl bg-white/70 dark:bg-gray-900/70 backdrop-blur-lg">
-              <CardHeader className="bg-gradient-to-r from-purple-600/10 to-pink-600/10 rounded-t-xl">
-                <CardTitle className="text-2xl">Admin Responses</CardTitle>
-                <CardDescription>View feedback and messages from administrators</CardDescription>
-              </CardHeader>
-              <CardContent className="p-0">
-                <Table>
-                  <TableHeader>
-                    <TableRow className="bg-gray-50/50 dark:bg-gray-800/50">
-                      <TableHead className="font-semibold">Message</TableHead>
-                      <TableHead className="font-semibold">Status</TableHead>
-                      <TableHead className="font-semibold">Date</TableHead>
-                    </TableRow>
-                  </TableHeader>
-                  <TableBody>
-                    {mockAdminResponses.map((response, index) => (
-                      <TableRow key={index} className="hover:bg-purple-50/50 dark:hover:bg-purple-900/20 transition-all duration-200">
-                        <TableCell className="font-medium text-gray-900 dark:text-gray-100">{response.message}</TableCell>
-                        <TableCell>
-                          <Badge className={`${getStatusColor(response.status)} shadow-md`}>{response.status}</Badge>
-                        </TableCell>
-                        <TableCell className="text-gray-600 dark:text-gray-400">{response.date}</TableCell>
-                      </TableRow>
-                    ))}
-                  </TableBody>
-                </Table>
-              </CardContent>
-            </Card>
-          </TabsContent>
-        </Tabs>
+            {/* Pagination */}
+            {filter !== "admin" && totalPages > 1 && (
+              <Pagination currentPage={currentPage} totalPages={totalPages} onPageChange={setCurrentPage} />
+            )}
+          </CardContent>
+        </Card>
       </div>
-
-      <style jsx>{`
-        @keyframes blob {
-          0% {
-            transform: translate(0px, 0px) scale(1);
-          }
-          33% {
-            transform: translate(30px, -50px) scale(1.1);
-          }
-          66% {
-            transform: translate(-20px, 20px) scale(0.9);
-          }
-          100% {
-            transform: translate(0px, 0px) scale(1);
-          }
-        }
-        .animate-blob {
-          animation: blob 7s infinite;
-        }
-        .animation-delay-2000 {
-          animation-delay: 2s;
-        }
-        .animation-delay-4000 {
-          animation-delay: 4s;
-        }
-      `}</style>
     </div>
   )
 }
\ No newline at end of file
diff --git a/src/components/footer.tsx b/src/components/footer.tsx
index cb712b5..109df24 100644
--- a/src/components/footer.tsx
+++ b/src/components/footer.tsx
@@ -10,7 +10,6 @@ import {
   Facebook, 
   Twitter, 
   Linkedin,
-  ArrowUpRight,
   Globe
 } from 'lucide-react';
 
